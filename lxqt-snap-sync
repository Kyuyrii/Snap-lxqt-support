#!/usr/bin/env python3
from PyQt6.QtWidgets import QApplication, QWidget, QVBoxLayout, QLabel, QPushButton, QListWidget, QPlainTextEdit
from PyQt6.QtGui import QIcon
from pathlib import Path
import shutil, subprocess, re, sys, argparse

HOME = Path.home()
SRC_LXQT = HOME / ".config" / "lxqt"
SRC_KVANTUM = HOME / ".config" / "Kvantum"

# ---------------- Utility Functions ----------------

def run_cmd(cmd):
    try:
        return subprocess.run(cmd, capture_output=True, text=True, check=False).stdout
    except Exception:
        return ""

def parse_snap_connections_output(output):
    snaps = set()
    for line in output.splitlines():
        line = line.strip()
        if not line or line.lower().startswith(('interface', 'plug')):
            continue
        tokens = re.split(r"\s+", line)
        for tok in tokens[:2]:
            if ':' in tok:
                name, _ = tok.split(':', 1)
                if name != 'lxqt-support':
                    snaps.add(name)
    return sorted(snaps)

def get_connected_snaps():
    out = run_cmd(["snap", "connections", "lxqt-support"])
    if not out:
        out2 = run_cmd(["snap", "connections"])
        out2 = '\n'.join(l for l in out2.splitlines() if 'lxqt-support' in l)
        return parse_snap_connections_output(out2)
    return parse_snap_connections_output(out)

def choose_target_config_dir(snap):
    snap_dir = Path('/snap') / snap
    rev_dirs = [p for p in snap_dir.iterdir() if p.is_dir() and re.match(r'^[0-9x].*', p.name)]
    rev = sorted(rev_dirs, key=lambda p: p.name)[-1].name
    return HOME / 'snap' / snap / rev / '.config'

def safe_remove_dir(path):
    if path.exists():
        shutil.rmtree(path)

def copy_dir(src, dst, log_func):
    if not src.exists():
        log_func(f"Source not found: {src}")
        return
    dst.parent.mkdir(parents=True, exist_ok=True)
    if dst.exists():
        safe_remove_dir(dst)
    shutil.copytree(src, dst)
    log_func(f"Copied: {src} -> {dst}")

def sync_all_snaps(log_func):
    snaps = get_connected_snaps()
    if not snaps:
        log_func("No snaps connected to lxqt-support found.")
        return
    for snap in snaps:
        target = choose_target_config_dir(snap)
        target.mkdir(parents=True, exist_ok=True)
        copy_dir(SRC_LXQT, target / 'lxqt', log_func)
        copy_dir(SRC_KVANTUM, target / 'Kvantum', log_func)
    log_func("Synchronization completed.")

def remove_all_snaps(log_func):
    snaps = get_connected_snaps()
    if not snaps:
        log_func("No snaps connected to lxqt-support found.")
        return
    for snap in snaps:
        target = choose_target_config_dir(snap)
        for folder in ['lxqt', 'Kvantum']:
            path = target / folder
            if path.exists():
                safe_remove_dir(path)
                log_func(f"Removed: {path}")
    log_func("Removal completed.")

# ---------------- GUI ----------------

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("LXQT Snap Sync")
        self.resize(300, 400)

        self.layout = QVBoxLayout()
        self.setLayout(self.layout)

        self.label = QLabel("Installed Snaps that support LXQT and Kvantum:")
        self.layout.addWidget(self.label)

        self.snap_list = QListWidget()
        self.snap_list.setSelectionMode(QListWidget.SelectionMode.NoSelection)
        self.layout.addWidget(self.snap_list)

        self.btn_sync = QPushButton("Sync")
        self.layout.addWidget(self.btn_sync)
        self.btn_remove = QPushButton("Desync")
        self.layout.addWidget(self.btn_remove)

        self.log_widget = QPlainTextEdit()
        self.log_widget.setReadOnly(True)
        self.layout.addWidget(self.log_widget)

        self.btn_sync.clicked.connect(lambda: sync_all_snaps(self.log))
        self.btn_remove.clicked.connect(lambda: remove_all_snaps(self.log))

        self.populate_snaps()

        for name in ['desktop-environment-lxqt']:
            icon = QIcon.fromTheme(name)
            if not icon.isNull():
                self.setWindowIcon(icon)
                break

    def log(self, msg):
        self.log_widget.appendPlainText(msg)

    def populate_snaps(self):
        snaps = get_connected_snaps()
        self.snap_list.clear()
        self.snap_list.addItems(snaps)

# ---------------- Entrypoint ----------------

def main():
    parser = argparse.ArgumentParser(description="Sync or desync lxqt/Kvantum configs from snaps connected to lxqt-support")
    parser.add_argument('--sync', action='store_true', help='Sync all snaps (terminal mode)')
    parser.add_argument('--desync', action='store_true', help='Remove all configs from snaps (terminal mode)')
    parser.add_argument('--gui', action='store_true', help='Show GUI interface (default)')
    args = parser.parse_args()

    def tlog(msg):
        print(msg)
        sys.stdout.flush()

    # Default to GUI if no arguments
    if not (args.sync or args.desync or args.gui):
        args.gui = True

    if args.sync:
        sync_all_snaps(tlog)
    elif args.desync:
        remove_all_snaps(tlog)
    elif args.gui:
        try:
            app = QApplication([])
            window = MainWindow()
            window.show()
            app.exec()
        except ImportError:
            print("PyQt6 not installed, cannot open GUI")
            sys.exit(1)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
